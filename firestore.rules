
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth.uid != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }

    match /customers/{customerId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isSignedIn();
      allow write: if isOwner(request.resource.data.userId);
    }

    match /campaigns/{campaignId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isSignedIn();
      allow write: if isOwner(request.resource.data.userId);
      
      // Allow unauthenticated update ONLY to increment openedCount by 1
      allow update: if request.auth == null &&
                     request.resource.data.openedCount == resource.data.openedCount + 1 &&
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['openedCount']);
    }
    
    match /scheduledEmails/{emailId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isSignedIn();
      allow write: if isOwner(request.resource.data.userId);
    }

    match /emailLogs/{logId} {
      allow get: if isOwner(resource.data.userId);
      allow list: if isSignedIn();
      allow create: if isOwner(request.resource.data.userId);
      
      // Allow an unauthenticated user to update ONLY the status to 'Opened'
      allow update: if (isOwner(request.resource.data.userId)) || 
                     (
                       request.auth == null &&
                       request.resource.data.status == 'Opened' &&
                       resource.data.status == 'Sent' &&
                       request.resource.data.openedAt == request.time &&
                       request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'openedAt'])
                     );

      allow delete: if false;
    }
  }
}
